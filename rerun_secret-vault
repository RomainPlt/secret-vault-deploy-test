#!/bin/bash


####################################################################### VARIABLES


path_to_app=~/iexecdev/iexec-secret-vault
path=$(pwd)
name_app=secret-vault
dockerfile=Dockerfile-trusted
image_name=romainplt/secret-vault
secret=
key=
scone_heap=2G
build_arg=build/libs/*.jar
cas_image=iexechub/sconecuratedimages-iexec:cas-v3.0 
las_image=iexechub/sconecuratedimages-iexec:las-v3.0
scone_image=sconecuratedimages/public-apps:python-3.7.3-alpine3.10-scone3.0 
network=local_network


####################################################################### FUNCTIONS


usage()
{
	echo "  
	
	Run you app in a local CAS.
	
		./run_secret-vault [-tag] 
		
		./run_secret-vault -s mySecret -k myKey -i example/image -d my-dockerfile -b /path/to/*.jar -n my-app -p /path/to/app --cas-image example/cas-image --las-image example/las-image --scone-image example/scone-cli-image --scone-heap 2G --docker-network my-local-network
		 
		
		-b --build-arg 	Path to jar file for docker.
					Default : build/libs/*.jar 
		-d --dockerfile     	Name of the file your docker build points to. 
					Default : Dockerfile-trusted
		-i --image-name     	App's image name for building in docker. 
					Default : romainplt/secret-vault 
		-k --key		Key to inject in session
		-n --name           	Your app's name need to be the one you use to run docker-compose. 		
					Default : secretVault 
		-p --path-to-app    	Absolute path. You need to have a docker-compose in the folder you point. 	
					Default : ~/iexecdev/iexec-secret-vault-deploy
		-s --secret		Secret to inject in session
		
		
		
		--cas-image		CAS's docker image.
					Default : iexechub/sconecuratedimages-iexec:cas-v3.0
		--las-image		LAS's docker image.
					Default : iexechub/sconecuratedimages-iexec:las-v3.0
		--scone-image		Scone-cli's image.
					Default : sconecuratedimages/public-apps:python-3.7.3-alpine3.10-scone3.0 
		--scone-heap     	Change SCONE_HEAP. xG giga / xM mega / xK kilo / x octets. 			
					Default : 2G
		--docker-network	Docker network to link cas las and scone on the same local network.
					Default : local_network
		"
}	



run_demo()
{
	cd $path
	source run_secret-vault -s $secret -k $key -i $image_name -d $dockerfile -b $build_arg -n $name_app -p $path_to_app --cas-image $cas_image --las-image $las_image --scone-image $scone_image --scone-heap $scone_heap --docker-network $network
	

}

wait_for_app()
{	
	echo "Wait until the app is up. Takes about 2 minutes"
	
	sleep 120 &
	PID=$!
	i=1
	sp="/-\|"
	echo -n ' '
	while [ -d /proc/$PID ]
	do
	  printf "\b${sp:i++%${#sp}:1}"
	  sleep 0.55
	done
	echo " "
	echo "App is up"
}

push_secret_to_db()
{
	echo " "
	echo "Pushing secret to db"
	curl -X POST http://localhost:8080/vault/session/secret
}

get_secret_from_db()
{
	echo " "
	echo "Retrieve secret from db with key : $key"
	curl -X GET http://localhost:8080/vault/secret?key=$key
}

kill_app()
{	
	echo " " 
	echo "Now we kill the app"
	
	docker stop secret-vault
	docker rm secret-vault	
}
	
rerun_app()
{
	cd $path
	echo "Starting the app again"
	docker-compose up secret-vault
	
}

	

####################################################################### SCRIPTS


if [ "$1" == "" ]; then
	usage
	exit
fi

while [ "$1" != "" ]; do
	case $1 in
		--scone-heap )
			shift
			scone_heap=$1
			;;
		-s | --secret )
			shift
			secret=$1
			;;
		-k | --key )
			shift
			key=$1
			;;
		-p | --path-to-app )
			shift
			path_to_app=$1
			;;
		-n | --name )
			shift
			name_app=$1
			;;
		-d | --dockerfile )
			shift 
			dockerfile=$1
			;;
		-i | --image_name )
			shift
			image_name=$1
			;;
		-b | --build-arg ) 
			shift
			build_arg=$1
			;;
		--cas-image )
			shift
			cas_image=$1
			;;
		--las-image )
			shift
			las_image=$1
			;;
		--scone-image ) 
			shift
			scone_image=$1
			;;
		--docker-network ) 
			shift
			network=$1
			;;
		-h | --help )
			usage
			exit
			;;
		* ) 	usage
			exit
			;;
			
	esac
	shift
done

run_demo
wait_for_app
push_secret_to_db
get_secret_from_db
kill_app
rerun_app











	
